/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pelion.kafka.connect;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DeviceRequestData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1820829924895977445L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DeviceRequestData\",\"namespace\":\"com.pelion.kafka.connect\",\"fields\":[{\"name\":\"ep\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"async_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"retry\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"expiry_seconds\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"body\",\"type\":{\"type\":\"record\",\"name\":\"BodyData\",\"fields\":[{\"name\":\"method\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"uri\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accept\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"content_type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"payload_b64\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DeviceRequestData> ENCODER =
      new BinaryMessageEncoder<DeviceRequestData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DeviceRequestData> DECODER =
      new BinaryMessageDecoder<DeviceRequestData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DeviceRequestData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DeviceRequestData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DeviceRequestData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DeviceRequestData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DeviceRequestData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DeviceRequestData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DeviceRequestData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DeviceRequestData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String ep;
   private java.lang.String async_id;
   private java.lang.Integer retry;
   private java.lang.Long expiry_seconds;
   private com.pelion.kafka.connect.BodyData body;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DeviceRequestData() {}

  /**
   * All-args constructor.
   * @param ep The new value for ep
   * @param async_id The new value for async_id
   * @param retry The new value for retry
   * @param expiry_seconds The new value for expiry_seconds
   * @param body The new value for body
   */
  public DeviceRequestData(java.lang.String ep, java.lang.String async_id, java.lang.Integer retry, java.lang.Long expiry_seconds, com.pelion.kafka.connect.BodyData body) {
    this.ep = ep;
    this.async_id = async_id;
    this.retry = retry;
    this.expiry_seconds = expiry_seconds;
    this.body = body;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ep;
    case 1: return async_id;
    case 2: return retry;
    case 3: return expiry_seconds;
    case 4: return body;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ep = value$ != null ? value$.toString() : null; break;
    case 1: async_id = value$ != null ? value$.toString() : null; break;
    case 2: retry = (java.lang.Integer)value$; break;
    case 3: expiry_seconds = (java.lang.Long)value$; break;
    case 4: body = (com.pelion.kafka.connect.BodyData)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'ep' field.
   * @return The value of the 'ep' field.
   */
  public java.lang.String getEp() {
    return ep;
  }


  /**
   * Sets the value of the 'ep' field.
   * @param value the value to set.
   */
  public void setEp(java.lang.String value) {
    this.ep = value;
  }

  /**
   * Gets the value of the 'async_id' field.
   * @return The value of the 'async_id' field.
   */
  public java.lang.String getAsyncId() {
    return async_id;
  }


  /**
   * Sets the value of the 'async_id' field.
   * @param value the value to set.
   */
  public void setAsyncId(java.lang.String value) {
    this.async_id = value;
  }

  /**
   * Gets the value of the 'retry' field.
   * @return The value of the 'retry' field.
   */
  public java.lang.Integer getRetry() {
    return retry;
  }


  /**
   * Sets the value of the 'retry' field.
   * @param value the value to set.
   */
  public void setRetry(java.lang.Integer value) {
    this.retry = value;
  }

  /**
   * Gets the value of the 'expiry_seconds' field.
   * @return The value of the 'expiry_seconds' field.
   */
  public java.lang.Long getExpirySeconds() {
    return expiry_seconds;
  }


  /**
   * Sets the value of the 'expiry_seconds' field.
   * @param value the value to set.
   */
  public void setExpirySeconds(java.lang.Long value) {
    this.expiry_seconds = value;
  }

  /**
   * Gets the value of the 'body' field.
   * @return The value of the 'body' field.
   */
  public com.pelion.kafka.connect.BodyData getBody() {
    return body;
  }


  /**
   * Sets the value of the 'body' field.
   * @param value the value to set.
   */
  public void setBody(com.pelion.kafka.connect.BodyData value) {
    this.body = value;
  }

  /**
   * Creates a new DeviceRequestData RecordBuilder.
   * @return A new DeviceRequestData RecordBuilder
   */
  public static com.pelion.kafka.connect.DeviceRequestData.Builder newBuilder() {
    return new com.pelion.kafka.connect.DeviceRequestData.Builder();
  }

  /**
   * Creates a new DeviceRequestData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DeviceRequestData RecordBuilder
   */
  public static com.pelion.kafka.connect.DeviceRequestData.Builder newBuilder(com.pelion.kafka.connect.DeviceRequestData.Builder other) {
    if (other == null) {
      return new com.pelion.kafka.connect.DeviceRequestData.Builder();
    } else {
      return new com.pelion.kafka.connect.DeviceRequestData.Builder(other);
    }
  }

  /**
   * Creates a new DeviceRequestData RecordBuilder by copying an existing DeviceRequestData instance.
   * @param other The existing instance to copy.
   * @return A new DeviceRequestData RecordBuilder
   */
  public static com.pelion.kafka.connect.DeviceRequestData.Builder newBuilder(com.pelion.kafka.connect.DeviceRequestData other) {
    if (other == null) {
      return new com.pelion.kafka.connect.DeviceRequestData.Builder();
    } else {
      return new com.pelion.kafka.connect.DeviceRequestData.Builder(other);
    }
  }

  /**
   * RecordBuilder for DeviceRequestData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DeviceRequestData>
    implements org.apache.avro.data.RecordBuilder<DeviceRequestData> {

    private java.lang.String ep;
    private java.lang.String async_id;
    private java.lang.Integer retry;
    private java.lang.Long expiry_seconds;
    private com.pelion.kafka.connect.BodyData body;
    private com.pelion.kafka.connect.BodyData.Builder bodyBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pelion.kafka.connect.DeviceRequestData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ep)) {
        this.ep = data().deepCopy(fields()[0].schema(), other.ep);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.async_id)) {
        this.async_id = data().deepCopy(fields()[1].schema(), other.async_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.retry)) {
        this.retry = data().deepCopy(fields()[2].schema(), other.retry);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.expiry_seconds)) {
        this.expiry_seconds = data().deepCopy(fields()[3].schema(), other.expiry_seconds);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.body)) {
        this.body = data().deepCopy(fields()[4].schema(), other.body);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasBodyBuilder()) {
        this.bodyBuilder = com.pelion.kafka.connect.BodyData.newBuilder(other.getBodyBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing DeviceRequestData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pelion.kafka.connect.DeviceRequestData other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.ep)) {
        this.ep = data().deepCopy(fields()[0].schema(), other.ep);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.async_id)) {
        this.async_id = data().deepCopy(fields()[1].schema(), other.async_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.retry)) {
        this.retry = data().deepCopy(fields()[2].schema(), other.retry);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.expiry_seconds)) {
        this.expiry_seconds = data().deepCopy(fields()[3].schema(), other.expiry_seconds);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.body)) {
        this.body = data().deepCopy(fields()[4].schema(), other.body);
        fieldSetFlags()[4] = true;
      }
      this.bodyBuilder = null;
    }

    /**
      * Gets the value of the 'ep' field.
      * @return The value.
      */
    public java.lang.String getEp() {
      return ep;
    }


    /**
      * Sets the value of the 'ep' field.
      * @param value The value of 'ep'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.DeviceRequestData.Builder setEp(java.lang.String value) {
      validate(fields()[0], value);
      this.ep = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ep' field has been set.
      * @return True if the 'ep' field has been set, false otherwise.
      */
    public boolean hasEp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ep' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.DeviceRequestData.Builder clearEp() {
      ep = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'async_id' field.
      * @return The value.
      */
    public java.lang.String getAsyncId() {
      return async_id;
    }


    /**
      * Sets the value of the 'async_id' field.
      * @param value The value of 'async_id'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.DeviceRequestData.Builder setAsyncId(java.lang.String value) {
      validate(fields()[1], value);
      this.async_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'async_id' field has been set.
      * @return True if the 'async_id' field has been set, false otherwise.
      */
    public boolean hasAsyncId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'async_id' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.DeviceRequestData.Builder clearAsyncId() {
      async_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'retry' field.
      * @return The value.
      */
    public java.lang.Integer getRetry() {
      return retry;
    }


    /**
      * Sets the value of the 'retry' field.
      * @param value The value of 'retry'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.DeviceRequestData.Builder setRetry(java.lang.Integer value) {
      validate(fields()[2], value);
      this.retry = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'retry' field has been set.
      * @return True if the 'retry' field has been set, false otherwise.
      */
    public boolean hasRetry() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'retry' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.DeviceRequestData.Builder clearRetry() {
      retry = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'expiry_seconds' field.
      * @return The value.
      */
    public java.lang.Long getExpirySeconds() {
      return expiry_seconds;
    }


    /**
      * Sets the value of the 'expiry_seconds' field.
      * @param value The value of 'expiry_seconds'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.DeviceRequestData.Builder setExpirySeconds(java.lang.Long value) {
      validate(fields()[3], value);
      this.expiry_seconds = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'expiry_seconds' field has been set.
      * @return True if the 'expiry_seconds' field has been set, false otherwise.
      */
    public boolean hasExpirySeconds() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'expiry_seconds' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.DeviceRequestData.Builder clearExpirySeconds() {
      expiry_seconds = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'body' field.
      * @return The value.
      */
    public com.pelion.kafka.connect.BodyData getBody() {
      return body;
    }


    /**
      * Sets the value of the 'body' field.
      * @param value The value of 'body'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.DeviceRequestData.Builder setBody(com.pelion.kafka.connect.BodyData value) {
      validate(fields()[4], value);
      this.bodyBuilder = null;
      this.body = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'body' field has been set.
      * @return True if the 'body' field has been set, false otherwise.
      */
    public boolean hasBody() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'body' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pelion.kafka.connect.BodyData.Builder getBodyBuilder() {
      if (bodyBuilder == null) {
        if (hasBody()) {
          setBodyBuilder(com.pelion.kafka.connect.BodyData.newBuilder(body));
        } else {
          setBodyBuilder(com.pelion.kafka.connect.BodyData.newBuilder());
        }
      }
      return bodyBuilder;
    }

    /**
     * Sets the Builder instance for the 'body' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.pelion.kafka.connect.DeviceRequestData.Builder setBodyBuilder(com.pelion.kafka.connect.BodyData.Builder value) {
      clearBody();
      bodyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'body' field has an active Builder instance
     * @return True if the 'body' field has an active Builder instance
     */
    public boolean hasBodyBuilder() {
      return bodyBuilder != null;
    }

    /**
      * Clears the value of the 'body' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.DeviceRequestData.Builder clearBody() {
      body = null;
      bodyBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DeviceRequestData build() {
      try {
        DeviceRequestData record = new DeviceRequestData();
        record.ep = fieldSetFlags()[0] ? this.ep : (java.lang.String) defaultValue(fields()[0]);
        record.async_id = fieldSetFlags()[1] ? this.async_id : (java.lang.String) defaultValue(fields()[1]);
        record.retry = fieldSetFlags()[2] ? this.retry : (java.lang.Integer) defaultValue(fields()[2]);
        record.expiry_seconds = fieldSetFlags()[3] ? this.expiry_seconds : (java.lang.Long) defaultValue(fields()[3]);
        if (bodyBuilder != null) {
          try {
            record.body = this.bodyBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("body"));
            throw e;
          }
        } else {
          record.body = fieldSetFlags()[4] ? this.body : (com.pelion.kafka.connect.BodyData) defaultValue(fields()[4]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DeviceRequestData>
    WRITER$ = (org.apache.avro.io.DatumWriter<DeviceRequestData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DeviceRequestData>
    READER$ = (org.apache.avro.io.DatumReader<DeviceRequestData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.ep);

    out.writeString(this.async_id);

    if (this.retry == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.retry);
    }

    if (this.expiry_seconds == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.expiry_seconds);
    }

    this.body.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.ep = in.readString();

      this.async_id = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.retry = null;
      } else {
        this.retry = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.expiry_seconds = null;
      } else {
        this.expiry_seconds = in.readLong();
      }

      if (this.body == null) {
        this.body = new com.pelion.kafka.connect.BodyData();
      }
      this.body.customDecode(in);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.ep = in.readString();
          break;

        case 1:
          this.async_id = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.retry = null;
          } else {
            this.retry = in.readInt();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.expiry_seconds = null;
          } else {
            this.expiry_seconds = in.readLong();
          }
          break;

        case 4:
          if (this.body == null) {
            this.body = new com.pelion.kafka.connect.BodyData();
          }
          this.body.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










