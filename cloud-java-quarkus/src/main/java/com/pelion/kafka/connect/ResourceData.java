/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pelion.kafka.connect;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ResourceData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1939978911508751628L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ResourceData\",\"namespace\":\"com.pelion.kafka.connect\",\"fields\":[{\"name\":\"path\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"if\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"rt\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"ct\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"obs\",\"type\":[\"null\",\"boolean\"],\"default\":null}],\"connect.version\":1,\"connect.name\":\"com.pelion.kafka.connect.ResourceData\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ResourceData> ENCODER =
      new BinaryMessageEncoder<ResourceData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ResourceData> DECODER =
      new BinaryMessageDecoder<ResourceData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ResourceData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ResourceData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ResourceData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ResourceData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ResourceData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ResourceData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ResourceData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ResourceData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String path;
   private java.lang.String if$;
   private java.lang.String rt;
   private java.lang.String ct;
   private java.lang.Boolean obs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ResourceData() {}

  /**
   * All-args constructor.
   * @param path The new value for path
   * @param if$ The new value for if
   * @param rt The new value for rt
   * @param ct The new value for ct
   * @param obs The new value for obs
   */
  public ResourceData(java.lang.String path, java.lang.String if$, java.lang.String rt, java.lang.String ct, java.lang.Boolean obs) {
    this.path = path;
    this.if$ = if$;
    this.rt = rt;
    this.ct = ct;
    this.obs = obs;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return path;
    case 1: return if$;
    case 2: return rt;
    case 3: return ct;
    case 4: return obs;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: path = value$ != null ? value$.toString() : null; break;
    case 1: if$ = value$ != null ? value$.toString() : null; break;
    case 2: rt = value$ != null ? value$.toString() : null; break;
    case 3: ct = value$ != null ? value$.toString() : null; break;
    case 4: obs = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'path' field.
   * @return The value of the 'path' field.
   */
  public java.lang.String getPath() {
    return path;
  }


  /**
   * Sets the value of the 'path' field.
   * @param value the value to set.
   */
  public void setPath(java.lang.String value) {
    this.path = value;
  }

  /**
   * Gets the value of the 'if$' field.
   * @return The value of the 'if$' field.
   */
  public java.lang.String getIf$() {
    return if$;
  }


  /**
   * Sets the value of the 'if$' field.
   * @param value the value to set.
   */
  public void setIf$(java.lang.String value) {
    this.if$ = value;
  }

  /**
   * Gets the value of the 'rt' field.
   * @return The value of the 'rt' field.
   */
  public java.lang.String getRt() {
    return rt;
  }


  /**
   * Sets the value of the 'rt' field.
   * @param value the value to set.
   */
  public void setRt(java.lang.String value) {
    this.rt = value;
  }

  /**
   * Gets the value of the 'ct' field.
   * @return The value of the 'ct' field.
   */
  public java.lang.String getCt() {
    return ct;
  }


  /**
   * Sets the value of the 'ct' field.
   * @param value the value to set.
   */
  public void setCt(java.lang.String value) {
    this.ct = value;
  }

  /**
   * Gets the value of the 'obs' field.
   * @return The value of the 'obs' field.
   */
  public java.lang.Boolean getObs() {
    return obs;
  }


  /**
   * Sets the value of the 'obs' field.
   * @param value the value to set.
   */
  public void setObs(java.lang.Boolean value) {
    this.obs = value;
  }

  /**
   * Creates a new ResourceData RecordBuilder.
   * @return A new ResourceData RecordBuilder
   */
  public static com.pelion.kafka.connect.ResourceData.Builder newBuilder() {
    return new com.pelion.kafka.connect.ResourceData.Builder();
  }

  /**
   * Creates a new ResourceData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ResourceData RecordBuilder
   */
  public static com.pelion.kafka.connect.ResourceData.Builder newBuilder(com.pelion.kafka.connect.ResourceData.Builder other) {
    if (other == null) {
      return new com.pelion.kafka.connect.ResourceData.Builder();
    } else {
      return new com.pelion.kafka.connect.ResourceData.Builder(other);
    }
  }

  /**
   * Creates a new ResourceData RecordBuilder by copying an existing ResourceData instance.
   * @param other The existing instance to copy.
   * @return A new ResourceData RecordBuilder
   */
  public static com.pelion.kafka.connect.ResourceData.Builder newBuilder(com.pelion.kafka.connect.ResourceData other) {
    if (other == null) {
      return new com.pelion.kafka.connect.ResourceData.Builder();
    } else {
      return new com.pelion.kafka.connect.ResourceData.Builder(other);
    }
  }

  /**
   * RecordBuilder for ResourceData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ResourceData>
    implements org.apache.avro.data.RecordBuilder<ResourceData> {

    private java.lang.String path;
    private java.lang.String if$;
    private java.lang.String rt;
    private java.lang.String ct;
    private java.lang.Boolean obs;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pelion.kafka.connect.ResourceData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.path)) {
        this.path = data().deepCopy(fields()[0].schema(), other.path);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.if$)) {
        this.if$ = data().deepCopy(fields()[1].schema(), other.if$);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.rt)) {
        this.rt = data().deepCopy(fields()[2].schema(), other.rt);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.ct)) {
        this.ct = data().deepCopy(fields()[3].schema(), other.ct);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.obs)) {
        this.obs = data().deepCopy(fields()[4].schema(), other.obs);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ResourceData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pelion.kafka.connect.ResourceData other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.path)) {
        this.path = data().deepCopy(fields()[0].schema(), other.path);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.if$)) {
        this.if$ = data().deepCopy(fields()[1].schema(), other.if$);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rt)) {
        this.rt = data().deepCopy(fields()[2].schema(), other.rt);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ct)) {
        this.ct = data().deepCopy(fields()[3].schema(), other.ct);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.obs)) {
        this.obs = data().deepCopy(fields()[4].schema(), other.obs);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'path' field.
      * @return The value.
      */
    public java.lang.String getPath() {
      return path;
    }


    /**
      * Sets the value of the 'path' field.
      * @param value The value of 'path'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.ResourceData.Builder setPath(java.lang.String value) {
      validate(fields()[0], value);
      this.path = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'path' field has been set.
      * @return True if the 'path' field has been set, false otherwise.
      */
    public boolean hasPath() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'path' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.ResourceData.Builder clearPath() {
      path = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'if$' field.
      * @return The value.
      */
    public java.lang.String getIf$() {
      return if$;
    }


    /**
      * Sets the value of the 'if$' field.
      * @param value The value of 'if$'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.ResourceData.Builder setIf$(java.lang.String value) {
      validate(fields()[1], value);
      this.if$ = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'if$' field has been set.
      * @return True if the 'if$' field has been set, false otherwise.
      */
    public boolean hasIf$() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'if$' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.ResourceData.Builder clearIf$() {
      if$ = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'rt' field.
      * @return The value.
      */
    public java.lang.String getRt() {
      return rt;
    }


    /**
      * Sets the value of the 'rt' field.
      * @param value The value of 'rt'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.ResourceData.Builder setRt(java.lang.String value) {
      validate(fields()[2], value);
      this.rt = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'rt' field has been set.
      * @return True if the 'rt' field has been set, false otherwise.
      */
    public boolean hasRt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'rt' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.ResourceData.Builder clearRt() {
      rt = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ct' field.
      * @return The value.
      */
    public java.lang.String getCt() {
      return ct;
    }


    /**
      * Sets the value of the 'ct' field.
      * @param value The value of 'ct'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.ResourceData.Builder setCt(java.lang.String value) {
      validate(fields()[3], value);
      this.ct = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ct' field has been set.
      * @return True if the 'ct' field has been set, false otherwise.
      */
    public boolean hasCt() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ct' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.ResourceData.Builder clearCt() {
      ct = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'obs' field.
      * @return The value.
      */
    public java.lang.Boolean getObs() {
      return obs;
    }


    /**
      * Sets the value of the 'obs' field.
      * @param value The value of 'obs'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.ResourceData.Builder setObs(java.lang.Boolean value) {
      validate(fields()[4], value);
      this.obs = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'obs' field has been set.
      * @return True if the 'obs' field has been set, false otherwise.
      */
    public boolean hasObs() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'obs' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.ResourceData.Builder clearObs() {
      obs = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ResourceData build() {
      try {
        ResourceData record = new ResourceData();
        record.path = fieldSetFlags()[0] ? this.path : (java.lang.String) defaultValue(fields()[0]);
        record.if$ = fieldSetFlags()[1] ? this.if$ : (java.lang.String) defaultValue(fields()[1]);
        record.rt = fieldSetFlags()[2] ? this.rt : (java.lang.String) defaultValue(fields()[2]);
        record.ct = fieldSetFlags()[3] ? this.ct : (java.lang.String) defaultValue(fields()[3]);
        record.obs = fieldSetFlags()[4] ? this.obs : (java.lang.Boolean) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ResourceData>
    WRITER$ = (org.apache.avro.io.DatumWriter<ResourceData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ResourceData>
    READER$ = (org.apache.avro.io.DatumReader<ResourceData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.path);

    if (this.if$ == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.if$);
    }

    if (this.rt == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.rt);
    }

    if (this.ct == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.ct);
    }

    if (this.obs == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.obs);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.path = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.if$ = null;
      } else {
        this.if$ = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rt = null;
      } else {
        this.rt = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.ct = null;
      } else {
        this.ct = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.obs = null;
      } else {
        this.obs = in.readBoolean();
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.path = in.readString();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.if$ = null;
          } else {
            this.if$ = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rt = null;
          } else {
            this.rt = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ct = null;
          } else {
            this.ct = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.obs = null;
          } else {
            this.obs = in.readBoolean();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










