/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pelion.kafka.connect;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class NotificationData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3189678074605624024L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NotificationData\",\"namespace\":\"com.pelion.kafka.connect\",\"fields\":[{\"name\":\"ep\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"path\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ct\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"payload_b64\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"payload\",\"type\":{\"type\":\"record\",\"name\":\"PayloadData\",\"fields\":[{\"name\":\"s\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"l\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"d\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"b\",\"type\":[\"null\",\"boolean\"],\"default\":null}],\"connect.version\":1,\"connect.name\":\"com.pelion.kafka.connect.PayloadData\"}},{\"name\":\"max_age\",\"type\":\"int\"},{\"name\":\"uid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"original_ep\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"connect.version\":1,\"connect.name\":\"com.pelion.kafka.connect.NotificationData\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<NotificationData> ENCODER =
      new BinaryMessageEncoder<NotificationData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<NotificationData> DECODER =
      new BinaryMessageDecoder<NotificationData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<NotificationData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<NotificationData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<NotificationData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<NotificationData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this NotificationData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a NotificationData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a NotificationData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static NotificationData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String ep;
   private java.lang.String path;
   private java.lang.String ct;
   private java.lang.String payload_b64;
   private com.pelion.kafka.connect.PayloadData payload;
   private int max_age;
   private java.lang.String uid;
   private long timestamp;
   private java.lang.String original_ep;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NotificationData() {}

  /**
   * All-args constructor.
   * @param ep The new value for ep
   * @param path The new value for path
   * @param ct The new value for ct
   * @param payload_b64 The new value for payload_b64
   * @param payload The new value for payload
   * @param max_age The new value for max_age
   * @param uid The new value for uid
   * @param timestamp The new value for timestamp
   * @param original_ep The new value for original_ep
   */
  public NotificationData(java.lang.String ep, java.lang.String path, java.lang.String ct, java.lang.String payload_b64, com.pelion.kafka.connect.PayloadData payload, java.lang.Integer max_age, java.lang.String uid, java.lang.Long timestamp, java.lang.String original_ep) {
    this.ep = ep;
    this.path = path;
    this.ct = ct;
    this.payload_b64 = payload_b64;
    this.payload = payload;
    this.max_age = max_age;
    this.uid = uid;
    this.timestamp = timestamp;
    this.original_ep = original_ep;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ep;
    case 1: return path;
    case 2: return ct;
    case 3: return payload_b64;
    case 4: return payload;
    case 5: return max_age;
    case 6: return uid;
    case 7: return timestamp;
    case 8: return original_ep;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ep = value$ != null ? value$.toString() : null; break;
    case 1: path = value$ != null ? value$.toString() : null; break;
    case 2: ct = value$ != null ? value$.toString() : null; break;
    case 3: payload_b64 = value$ != null ? value$.toString() : null; break;
    case 4: payload = (com.pelion.kafka.connect.PayloadData)value$; break;
    case 5: max_age = (java.lang.Integer)value$; break;
    case 6: uid = value$ != null ? value$.toString() : null; break;
    case 7: timestamp = (java.lang.Long)value$; break;
    case 8: original_ep = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'ep' field.
   * @return The value of the 'ep' field.
   */
  public java.lang.String getEp() {
    return ep;
  }


  /**
   * Sets the value of the 'ep' field.
   * @param value the value to set.
   */
  public void setEp(java.lang.String value) {
    this.ep = value;
  }

  /**
   * Gets the value of the 'path' field.
   * @return The value of the 'path' field.
   */
  public java.lang.String getPath() {
    return path;
  }


  /**
   * Sets the value of the 'path' field.
   * @param value the value to set.
   */
  public void setPath(java.lang.String value) {
    this.path = value;
  }

  /**
   * Gets the value of the 'ct' field.
   * @return The value of the 'ct' field.
   */
  public java.lang.String getCt() {
    return ct;
  }


  /**
   * Sets the value of the 'ct' field.
   * @param value the value to set.
   */
  public void setCt(java.lang.String value) {
    this.ct = value;
  }

  /**
   * Gets the value of the 'payload_b64' field.
   * @return The value of the 'payload_b64' field.
   */
  public java.lang.String getPayloadB64() {
    return payload_b64;
  }


  /**
   * Sets the value of the 'payload_b64' field.
   * @param value the value to set.
   */
  public void setPayloadB64(java.lang.String value) {
    this.payload_b64 = value;
  }

  /**
   * Gets the value of the 'payload' field.
   * @return The value of the 'payload' field.
   */
  public com.pelion.kafka.connect.PayloadData getPayload() {
    return payload;
  }


  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(com.pelion.kafka.connect.PayloadData value) {
    this.payload = value;
  }

  /**
   * Gets the value of the 'max_age' field.
   * @return The value of the 'max_age' field.
   */
  public int getMaxAge() {
    return max_age;
  }


  /**
   * Sets the value of the 'max_age' field.
   * @param value the value to set.
   */
  public void setMaxAge(int value) {
    this.max_age = value;
  }

  /**
   * Gets the value of the 'uid' field.
   * @return The value of the 'uid' field.
   */
  public java.lang.String getUid() {
    return uid;
  }


  /**
   * Sets the value of the 'uid' field.
   * @param value the value to set.
   */
  public void setUid(java.lang.String value) {
    this.uid = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'original_ep' field.
   * @return The value of the 'original_ep' field.
   */
  public java.lang.String getOriginalEp() {
    return original_ep;
  }


  /**
   * Sets the value of the 'original_ep' field.
   * @param value the value to set.
   */
  public void setOriginalEp(java.lang.String value) {
    this.original_ep = value;
  }

  /**
   * Creates a new NotificationData RecordBuilder.
   * @return A new NotificationData RecordBuilder
   */
  public static com.pelion.kafka.connect.NotificationData.Builder newBuilder() {
    return new com.pelion.kafka.connect.NotificationData.Builder();
  }

  /**
   * Creates a new NotificationData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NotificationData RecordBuilder
   */
  public static com.pelion.kafka.connect.NotificationData.Builder newBuilder(com.pelion.kafka.connect.NotificationData.Builder other) {
    if (other == null) {
      return new com.pelion.kafka.connect.NotificationData.Builder();
    } else {
      return new com.pelion.kafka.connect.NotificationData.Builder(other);
    }
  }

  /**
   * Creates a new NotificationData RecordBuilder by copying an existing NotificationData instance.
   * @param other The existing instance to copy.
   * @return A new NotificationData RecordBuilder
   */
  public static com.pelion.kafka.connect.NotificationData.Builder newBuilder(com.pelion.kafka.connect.NotificationData other) {
    if (other == null) {
      return new com.pelion.kafka.connect.NotificationData.Builder();
    } else {
      return new com.pelion.kafka.connect.NotificationData.Builder(other);
    }
  }

  /**
   * RecordBuilder for NotificationData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NotificationData>
    implements org.apache.avro.data.RecordBuilder<NotificationData> {

    private java.lang.String ep;
    private java.lang.String path;
    private java.lang.String ct;
    private java.lang.String payload_b64;
    private com.pelion.kafka.connect.PayloadData payload;
    private com.pelion.kafka.connect.PayloadData.Builder payloadBuilder;
    private int max_age;
    private java.lang.String uid;
    private long timestamp;
    private java.lang.String original_ep;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pelion.kafka.connect.NotificationData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ep)) {
        this.ep = data().deepCopy(fields()[0].schema(), other.ep);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.path)) {
        this.path = data().deepCopy(fields()[1].schema(), other.path);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.ct)) {
        this.ct = data().deepCopy(fields()[2].schema(), other.ct);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.payload_b64)) {
        this.payload_b64 = data().deepCopy(fields()[3].schema(), other.payload_b64);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.payload)) {
        this.payload = data().deepCopy(fields()[4].schema(), other.payload);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasPayloadBuilder()) {
        this.payloadBuilder = com.pelion.kafka.connect.PayloadData.newBuilder(other.getPayloadBuilder());
      }
      if (isValidValue(fields()[5], other.max_age)) {
        this.max_age = data().deepCopy(fields()[5].schema(), other.max_age);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.uid)) {
        this.uid = data().deepCopy(fields()[6].schema(), other.uid);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.original_ep)) {
        this.original_ep = data().deepCopy(fields()[8].schema(), other.original_ep);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing NotificationData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pelion.kafka.connect.NotificationData other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.ep)) {
        this.ep = data().deepCopy(fields()[0].schema(), other.ep);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.path)) {
        this.path = data().deepCopy(fields()[1].schema(), other.path);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ct)) {
        this.ct = data().deepCopy(fields()[2].schema(), other.ct);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.payload_b64)) {
        this.payload_b64 = data().deepCopy(fields()[3].schema(), other.payload_b64);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.payload)) {
        this.payload = data().deepCopy(fields()[4].schema(), other.payload);
        fieldSetFlags()[4] = true;
      }
      this.payloadBuilder = null;
      if (isValidValue(fields()[5], other.max_age)) {
        this.max_age = data().deepCopy(fields()[5].schema(), other.max_age);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.uid)) {
        this.uid = data().deepCopy(fields()[6].schema(), other.uid);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.original_ep)) {
        this.original_ep = data().deepCopy(fields()[8].schema(), other.original_ep);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'ep' field.
      * @return The value.
      */
    public java.lang.String getEp() {
      return ep;
    }


    /**
      * Sets the value of the 'ep' field.
      * @param value The value of 'ep'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder setEp(java.lang.String value) {
      validate(fields()[0], value);
      this.ep = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ep' field has been set.
      * @return True if the 'ep' field has been set, false otherwise.
      */
    public boolean hasEp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ep' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder clearEp() {
      ep = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'path' field.
      * @return The value.
      */
    public java.lang.String getPath() {
      return path;
    }


    /**
      * Sets the value of the 'path' field.
      * @param value The value of 'path'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder setPath(java.lang.String value) {
      validate(fields()[1], value);
      this.path = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'path' field has been set.
      * @return True if the 'path' field has been set, false otherwise.
      */
    public boolean hasPath() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'path' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder clearPath() {
      path = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ct' field.
      * @return The value.
      */
    public java.lang.String getCt() {
      return ct;
    }


    /**
      * Sets the value of the 'ct' field.
      * @param value The value of 'ct'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder setCt(java.lang.String value) {
      validate(fields()[2], value);
      this.ct = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ct' field has been set.
      * @return True if the 'ct' field has been set, false otherwise.
      */
    public boolean hasCt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ct' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder clearCt() {
      ct = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload_b64' field.
      * @return The value.
      */
    public java.lang.String getPayloadB64() {
      return payload_b64;
    }


    /**
      * Sets the value of the 'payload_b64' field.
      * @param value The value of 'payload_b64'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder setPayloadB64(java.lang.String value) {
      validate(fields()[3], value);
      this.payload_b64 = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'payload_b64' field has been set.
      * @return True if the 'payload_b64' field has been set, false otherwise.
      */
    public boolean hasPayloadB64() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'payload_b64' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder clearPayloadB64() {
      payload_b64 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * @return The value.
      */
    public com.pelion.kafka.connect.PayloadData getPayload() {
      return payload;
    }


    /**
      * Sets the value of the 'payload' field.
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder setPayload(com.pelion.kafka.connect.PayloadData value) {
      validate(fields()[4], value);
      this.payloadBuilder = null;
      this.payload = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'payload' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pelion.kafka.connect.PayloadData.Builder getPayloadBuilder() {
      if (payloadBuilder == null) {
        if (hasPayload()) {
          setPayloadBuilder(com.pelion.kafka.connect.PayloadData.newBuilder(payload));
        } else {
          setPayloadBuilder(com.pelion.kafka.connect.PayloadData.newBuilder());
        }
      }
      return payloadBuilder;
    }

    /**
     * Sets the Builder instance for the 'payload' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.pelion.kafka.connect.NotificationData.Builder setPayloadBuilder(com.pelion.kafka.connect.PayloadData.Builder value) {
      clearPayload();
      payloadBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'payload' field has an active Builder instance
     * @return True if the 'payload' field has an active Builder instance
     */
    public boolean hasPayloadBuilder() {
      return payloadBuilder != null;
    }

    /**
      * Clears the value of the 'payload' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder clearPayload() {
      payload = null;
      payloadBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'max_age' field.
      * @return The value.
      */
    public int getMaxAge() {
      return max_age;
    }


    /**
      * Sets the value of the 'max_age' field.
      * @param value The value of 'max_age'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder setMaxAge(int value) {
      validate(fields()[5], value);
      this.max_age = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'max_age' field has been set.
      * @return True if the 'max_age' field has been set, false otherwise.
      */
    public boolean hasMaxAge() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'max_age' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder clearMaxAge() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'uid' field.
      * @return The value.
      */
    public java.lang.String getUid() {
      return uid;
    }


    /**
      * Sets the value of the 'uid' field.
      * @param value The value of 'uid'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder setUid(java.lang.String value) {
      validate(fields()[6], value);
      this.uid = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'uid' field has been set.
      * @return True if the 'uid' field has been set, false otherwise.
      */
    public boolean hasUid() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'uid' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder clearUid() {
      uid = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder setTimestamp(long value) {
      validate(fields()[7], value);
      this.timestamp = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder clearTimestamp() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'original_ep' field.
      * @return The value.
      */
    public java.lang.String getOriginalEp() {
      return original_ep;
    }


    /**
      * Sets the value of the 'original_ep' field.
      * @param value The value of 'original_ep'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder setOriginalEp(java.lang.String value) {
      validate(fields()[8], value);
      this.original_ep = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'original_ep' field has been set.
      * @return True if the 'original_ep' field has been set, false otherwise.
      */
    public boolean hasOriginalEp() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'original_ep' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.NotificationData.Builder clearOriginalEp() {
      original_ep = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NotificationData build() {
      try {
        NotificationData record = new NotificationData();
        record.ep = fieldSetFlags()[0] ? this.ep : (java.lang.String) defaultValue(fields()[0]);
        record.path = fieldSetFlags()[1] ? this.path : (java.lang.String) defaultValue(fields()[1]);
        record.ct = fieldSetFlags()[2] ? this.ct : (java.lang.String) defaultValue(fields()[2]);
        record.payload_b64 = fieldSetFlags()[3] ? this.payload_b64 : (java.lang.String) defaultValue(fields()[3]);
        if (payloadBuilder != null) {
          try {
            record.payload = this.payloadBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("payload"));
            throw e;
          }
        } else {
          record.payload = fieldSetFlags()[4] ? this.payload : (com.pelion.kafka.connect.PayloadData) defaultValue(fields()[4]);
        }
        record.max_age = fieldSetFlags()[5] ? this.max_age : (java.lang.Integer) defaultValue(fields()[5]);
        record.uid = fieldSetFlags()[6] ? this.uid : (java.lang.String) defaultValue(fields()[6]);
        record.timestamp = fieldSetFlags()[7] ? this.timestamp : (java.lang.Long) defaultValue(fields()[7]);
        record.original_ep = fieldSetFlags()[8] ? this.original_ep : (java.lang.String) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NotificationData>
    WRITER$ = (org.apache.avro.io.DatumWriter<NotificationData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NotificationData>
    READER$ = (org.apache.avro.io.DatumReader<NotificationData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.ep);

    out.writeString(this.path);

    out.writeString(this.ct);

    out.writeString(this.payload_b64);

    this.payload.customEncode(out);

    out.writeInt(this.max_age);

    out.writeString(this.uid);

    out.writeLong(this.timestamp);

    out.writeString(this.original_ep);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.ep = in.readString();

      this.path = in.readString();

      this.ct = in.readString();

      this.payload_b64 = in.readString();

      if (this.payload == null) {
        this.payload = new com.pelion.kafka.connect.PayloadData();
      }
      this.payload.customDecode(in);

      this.max_age = in.readInt();

      this.uid = in.readString();

      this.timestamp = in.readLong();

      this.original_ep = in.readString();

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.ep = in.readString();
          break;

        case 1:
          this.path = in.readString();
          break;

        case 2:
          this.ct = in.readString();
          break;

        case 3:
          this.payload_b64 = in.readString();
          break;

        case 4:
          if (this.payload == null) {
            this.payload = new com.pelion.kafka.connect.PayloadData();
          }
          this.payload.customDecode(in);
          break;

        case 5:
          this.max_age = in.readInt();
          break;

        case 6:
          this.uid = in.readString();
          break;

        case 7:
          this.timestamp = in.readLong();
          break;

        case 8:
          this.original_ep = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










