/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pelion.kafka.connect;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AsyncIDResponseData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -735544649954171786L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AsyncIDResponseData\",\"namespace\":\"com.pelion.kafka.connect\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"status\",\"type\":\"int\"},{\"name\":\"error\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"payload\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ct\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"max_age\",\"type\":[\"null\",\"int\"],\"default\":null}],\"connect.version\":1,\"connect.name\":\"com.pelion.kafka.connect.AsyncIDResponseData\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AsyncIDResponseData> ENCODER =
      new BinaryMessageEncoder<AsyncIDResponseData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AsyncIDResponseData> DECODER =
      new BinaryMessageDecoder<AsyncIDResponseData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AsyncIDResponseData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AsyncIDResponseData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AsyncIDResponseData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AsyncIDResponseData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AsyncIDResponseData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AsyncIDResponseData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AsyncIDResponseData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AsyncIDResponseData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String id;
   private int status;
   private java.lang.String error;
   private java.lang.String payload;
   private java.lang.String ct;
   private java.lang.Integer max_age;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AsyncIDResponseData() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param status The new value for status
   * @param error The new value for error
   * @param payload The new value for payload
   * @param ct The new value for ct
   * @param max_age The new value for max_age
   */
  public AsyncIDResponseData(java.lang.String id, java.lang.Integer status, java.lang.String error, java.lang.String payload, java.lang.String ct, java.lang.Integer max_age) {
    this.id = id;
    this.status = status;
    this.error = error;
    this.payload = payload;
    this.ct = ct;
    this.max_age = max_age;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return status;
    case 2: return error;
    case 3: return payload;
    case 4: return ct;
    case 5: return max_age;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: status = (java.lang.Integer)value$; break;
    case 2: error = value$ != null ? value$.toString() : null; break;
    case 3: payload = value$ != null ? value$.toString() : null; break;
    case 4: ct = value$ != null ? value$.toString() : null; break;
    case 5: max_age = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public int getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(int value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'error' field.
   * @return The value of the 'error' field.
   */
  public java.lang.String getError() {
    return error;
  }


  /**
   * Sets the value of the 'error' field.
   * @param value the value to set.
   */
  public void setError(java.lang.String value) {
    this.error = value;
  }

  /**
   * Gets the value of the 'payload' field.
   * @return The value of the 'payload' field.
   */
  public java.lang.String getPayload() {
    return payload;
  }


  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(java.lang.String value) {
    this.payload = value;
  }

  /**
   * Gets the value of the 'ct' field.
   * @return The value of the 'ct' field.
   */
  public java.lang.String getCt() {
    return ct;
  }


  /**
   * Sets the value of the 'ct' field.
   * @param value the value to set.
   */
  public void setCt(java.lang.String value) {
    this.ct = value;
  }

  /**
   * Gets the value of the 'max_age' field.
   * @return The value of the 'max_age' field.
   */
  public java.lang.Integer getMaxAge() {
    return max_age;
  }


  /**
   * Sets the value of the 'max_age' field.
   * @param value the value to set.
   */
  public void setMaxAge(java.lang.Integer value) {
    this.max_age = value;
  }

  /**
   * Creates a new AsyncIDResponseData RecordBuilder.
   * @return A new AsyncIDResponseData RecordBuilder
   */
  public static com.pelion.kafka.connect.AsyncIDResponseData.Builder newBuilder() {
    return new com.pelion.kafka.connect.AsyncIDResponseData.Builder();
  }

  /**
   * Creates a new AsyncIDResponseData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AsyncIDResponseData RecordBuilder
   */
  public static com.pelion.kafka.connect.AsyncIDResponseData.Builder newBuilder(com.pelion.kafka.connect.AsyncIDResponseData.Builder other) {
    if (other == null) {
      return new com.pelion.kafka.connect.AsyncIDResponseData.Builder();
    } else {
      return new com.pelion.kafka.connect.AsyncIDResponseData.Builder(other);
    }
  }

  /**
   * Creates a new AsyncIDResponseData RecordBuilder by copying an existing AsyncIDResponseData instance.
   * @param other The existing instance to copy.
   * @return A new AsyncIDResponseData RecordBuilder
   */
  public static com.pelion.kafka.connect.AsyncIDResponseData.Builder newBuilder(com.pelion.kafka.connect.AsyncIDResponseData other) {
    if (other == null) {
      return new com.pelion.kafka.connect.AsyncIDResponseData.Builder();
    } else {
      return new com.pelion.kafka.connect.AsyncIDResponseData.Builder(other);
    }
  }

  /**
   * RecordBuilder for AsyncIDResponseData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AsyncIDResponseData>
    implements org.apache.avro.data.RecordBuilder<AsyncIDResponseData> {

    private java.lang.String id;
    private int status;
    private java.lang.String error;
    private java.lang.String payload;
    private java.lang.String ct;
    private java.lang.Integer max_age;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pelion.kafka.connect.AsyncIDResponseData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.error)) {
        this.error = data().deepCopy(fields()[2].schema(), other.error);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.payload)) {
        this.payload = data().deepCopy(fields()[3].schema(), other.payload);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.ct)) {
        this.ct = data().deepCopy(fields()[4].schema(), other.ct);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.max_age)) {
        this.max_age = data().deepCopy(fields()[5].schema(), other.max_age);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing AsyncIDResponseData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pelion.kafka.connect.AsyncIDResponseData other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.error)) {
        this.error = data().deepCopy(fields()[2].schema(), other.error);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.payload)) {
        this.payload = data().deepCopy(fields()[3].schema(), other.payload);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ct)) {
        this.ct = data().deepCopy(fields()[4].schema(), other.ct);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.max_age)) {
        this.max_age = data().deepCopy(fields()[5].schema(), other.max_age);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.AsyncIDResponseData.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.AsyncIDResponseData.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public int getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.AsyncIDResponseData.Builder setStatus(int value) {
      validate(fields()[1], value);
      this.status = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.AsyncIDResponseData.Builder clearStatus() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'error' field.
      * @return The value.
      */
    public java.lang.String getError() {
      return error;
    }


    /**
      * Sets the value of the 'error' field.
      * @param value The value of 'error'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.AsyncIDResponseData.Builder setError(java.lang.String value) {
      validate(fields()[2], value);
      this.error = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'error' field has been set.
      * @return True if the 'error' field has been set, false otherwise.
      */
    public boolean hasError() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'error' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.AsyncIDResponseData.Builder clearError() {
      error = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * @return The value.
      */
    public java.lang.String getPayload() {
      return payload;
    }


    /**
      * Sets the value of the 'payload' field.
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.AsyncIDResponseData.Builder setPayload(java.lang.String value) {
      validate(fields()[3], value);
      this.payload = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'payload' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.AsyncIDResponseData.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'ct' field.
      * @return The value.
      */
    public java.lang.String getCt() {
      return ct;
    }


    /**
      * Sets the value of the 'ct' field.
      * @param value The value of 'ct'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.AsyncIDResponseData.Builder setCt(java.lang.String value) {
      validate(fields()[4], value);
      this.ct = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'ct' field has been set.
      * @return True if the 'ct' field has been set, false otherwise.
      */
    public boolean hasCt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'ct' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.AsyncIDResponseData.Builder clearCt() {
      ct = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'max_age' field.
      * @return The value.
      */
    public java.lang.Integer getMaxAge() {
      return max_age;
    }


    /**
      * Sets the value of the 'max_age' field.
      * @param value The value of 'max_age'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.AsyncIDResponseData.Builder setMaxAge(java.lang.Integer value) {
      validate(fields()[5], value);
      this.max_age = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'max_age' field has been set.
      * @return True if the 'max_age' field has been set, false otherwise.
      */
    public boolean hasMaxAge() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'max_age' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.AsyncIDResponseData.Builder clearMaxAge() {
      max_age = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AsyncIDResponseData build() {
      try {
        AsyncIDResponseData record = new AsyncIDResponseData();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.status = fieldSetFlags()[1] ? this.status : (java.lang.Integer) defaultValue(fields()[1]);
        record.error = fieldSetFlags()[2] ? this.error : (java.lang.String) defaultValue(fields()[2]);
        record.payload = fieldSetFlags()[3] ? this.payload : (java.lang.String) defaultValue(fields()[3]);
        record.ct = fieldSetFlags()[4] ? this.ct : (java.lang.String) defaultValue(fields()[4]);
        record.max_age = fieldSetFlags()[5] ? this.max_age : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AsyncIDResponseData>
    WRITER$ = (org.apache.avro.io.DatumWriter<AsyncIDResponseData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AsyncIDResponseData>
    READER$ = (org.apache.avro.io.DatumReader<AsyncIDResponseData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeInt(this.status);

    if (this.error == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.error);
    }

    out.writeString(this.payload);

    if (this.ct == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.ct);
    }

    if (this.max_age == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.max_age);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString();

      this.status = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.error = null;
      } else {
        this.error = in.readString();
      }

      this.payload = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.ct = null;
      } else {
        this.ct = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.max_age = null;
      } else {
        this.max_age = in.readInt();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString();
          break;

        case 1:
          this.status = in.readInt();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.error = null;
          } else {
            this.error = in.readString();
          }
          break;

        case 3:
          this.payload = in.readString();
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ct = null;
          } else {
            this.ct = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.max_age = null;
          } else {
            this.max_age = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










