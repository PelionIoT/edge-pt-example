/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pelion.kafka.connect;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EndpointData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5555115016272861391L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EndpointData\",\"namespace\":\"com.pelion.kafka.connect\",\"fields\":[{\"name\":\"ep\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"original_ep\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ept\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"q\",\"type\":\"boolean\"},{\"name\":\"resources\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ResourceData\",\"fields\":[{\"name\":\"path\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"if\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"rt\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"ct\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"obs\",\"type\":[\"null\",\"boolean\"],\"default\":null}],\"connect.version\":1,\"connect.name\":\"com.pelion.kafka.connect.ResourceData\"}}},{\"name\":\"timestamp\",\"type\":\"long\"}],\"connect.version\":1,\"connect.name\":\"com.pelion.kafka.connect.EndpointData\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EndpointData> ENCODER =
      new BinaryMessageEncoder<EndpointData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EndpointData> DECODER =
      new BinaryMessageDecoder<EndpointData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EndpointData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EndpointData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EndpointData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EndpointData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EndpointData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EndpointData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EndpointData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EndpointData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String ep;
   private java.lang.String original_ep;
   private java.lang.String ept;
   private boolean q;
   private java.util.List<com.pelion.kafka.connect.ResourceData> resources;
   private long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EndpointData() {}

  /**
   * All-args constructor.
   * @param ep The new value for ep
   * @param original_ep The new value for original_ep
   * @param ept The new value for ept
   * @param q The new value for q
   * @param resources The new value for resources
   * @param timestamp The new value for timestamp
   */
  public EndpointData(java.lang.String ep, java.lang.String original_ep, java.lang.String ept, java.lang.Boolean q, java.util.List<com.pelion.kafka.connect.ResourceData> resources, java.lang.Long timestamp) {
    this.ep = ep;
    this.original_ep = original_ep;
    this.ept = ept;
    this.q = q;
    this.resources = resources;
    this.timestamp = timestamp;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ep;
    case 1: return original_ep;
    case 2: return ept;
    case 3: return q;
    case 4: return resources;
    case 5: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ep = value$ != null ? value$.toString() : null; break;
    case 1: original_ep = value$ != null ? value$.toString() : null; break;
    case 2: ept = value$ != null ? value$.toString() : null; break;
    case 3: q = (java.lang.Boolean)value$; break;
    case 4: resources = (java.util.List<com.pelion.kafka.connect.ResourceData>)value$; break;
    case 5: timestamp = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'ep' field.
   * @return The value of the 'ep' field.
   */
  public java.lang.String getEp() {
    return ep;
  }


  /**
   * Sets the value of the 'ep' field.
   * @param value the value to set.
   */
  public void setEp(java.lang.String value) {
    this.ep = value;
  }

  /**
   * Gets the value of the 'original_ep' field.
   * @return The value of the 'original_ep' field.
   */
  public java.lang.String getOriginalEp() {
    return original_ep;
  }


  /**
   * Sets the value of the 'original_ep' field.
   * @param value the value to set.
   */
  public void setOriginalEp(java.lang.String value) {
    this.original_ep = value;
  }

  /**
   * Gets the value of the 'ept' field.
   * @return The value of the 'ept' field.
   */
  public java.lang.String getEpt() {
    return ept;
  }


  /**
   * Sets the value of the 'ept' field.
   * @param value the value to set.
   */
  public void setEpt(java.lang.String value) {
    this.ept = value;
  }

  /**
   * Gets the value of the 'q' field.
   * @return The value of the 'q' field.
   */
  public boolean getQ() {
    return q;
  }


  /**
   * Sets the value of the 'q' field.
   * @param value the value to set.
   */
  public void setQ(boolean value) {
    this.q = value;
  }

  /**
   * Gets the value of the 'resources' field.
   * @return The value of the 'resources' field.
   */
  public java.util.List<com.pelion.kafka.connect.ResourceData> getResources() {
    return resources;
  }


  /**
   * Sets the value of the 'resources' field.
   * @param value the value to set.
   */
  public void setResources(java.util.List<com.pelion.kafka.connect.ResourceData> value) {
    this.resources = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Creates a new EndpointData RecordBuilder.
   * @return A new EndpointData RecordBuilder
   */
  public static com.pelion.kafka.connect.EndpointData.Builder newBuilder() {
    return new com.pelion.kafka.connect.EndpointData.Builder();
  }

  /**
   * Creates a new EndpointData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EndpointData RecordBuilder
   */
  public static com.pelion.kafka.connect.EndpointData.Builder newBuilder(com.pelion.kafka.connect.EndpointData.Builder other) {
    if (other == null) {
      return new com.pelion.kafka.connect.EndpointData.Builder();
    } else {
      return new com.pelion.kafka.connect.EndpointData.Builder(other);
    }
  }

  /**
   * Creates a new EndpointData RecordBuilder by copying an existing EndpointData instance.
   * @param other The existing instance to copy.
   * @return A new EndpointData RecordBuilder
   */
  public static com.pelion.kafka.connect.EndpointData.Builder newBuilder(com.pelion.kafka.connect.EndpointData other) {
    if (other == null) {
      return new com.pelion.kafka.connect.EndpointData.Builder();
    } else {
      return new com.pelion.kafka.connect.EndpointData.Builder(other);
    }
  }

  /**
   * RecordBuilder for EndpointData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EndpointData>
    implements org.apache.avro.data.RecordBuilder<EndpointData> {

    private java.lang.String ep;
    private java.lang.String original_ep;
    private java.lang.String ept;
    private boolean q;
    private java.util.List<com.pelion.kafka.connect.ResourceData> resources;
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pelion.kafka.connect.EndpointData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ep)) {
        this.ep = data().deepCopy(fields()[0].schema(), other.ep);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.original_ep)) {
        this.original_ep = data().deepCopy(fields()[1].schema(), other.original_ep);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.ept)) {
        this.ept = data().deepCopy(fields()[2].schema(), other.ept);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.q)) {
        this.q = data().deepCopy(fields()[3].schema(), other.q);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.resources)) {
        this.resources = data().deepCopy(fields()[4].schema(), other.resources);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing EndpointData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pelion.kafka.connect.EndpointData other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.ep)) {
        this.ep = data().deepCopy(fields()[0].schema(), other.ep);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.original_ep)) {
        this.original_ep = data().deepCopy(fields()[1].schema(), other.original_ep);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ept)) {
        this.ept = data().deepCopy(fields()[2].schema(), other.ept);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.q)) {
        this.q = data().deepCopy(fields()[3].schema(), other.q);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.resources)) {
        this.resources = data().deepCopy(fields()[4].schema(), other.resources);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'ep' field.
      * @return The value.
      */
    public java.lang.String getEp() {
      return ep;
    }


    /**
      * Sets the value of the 'ep' field.
      * @param value The value of 'ep'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.EndpointData.Builder setEp(java.lang.String value) {
      validate(fields()[0], value);
      this.ep = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ep' field has been set.
      * @return True if the 'ep' field has been set, false otherwise.
      */
    public boolean hasEp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ep' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.EndpointData.Builder clearEp() {
      ep = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'original_ep' field.
      * @return The value.
      */
    public java.lang.String getOriginalEp() {
      return original_ep;
    }


    /**
      * Sets the value of the 'original_ep' field.
      * @param value The value of 'original_ep'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.EndpointData.Builder setOriginalEp(java.lang.String value) {
      validate(fields()[1], value);
      this.original_ep = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'original_ep' field has been set.
      * @return True if the 'original_ep' field has been set, false otherwise.
      */
    public boolean hasOriginalEp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'original_ep' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.EndpointData.Builder clearOriginalEp() {
      original_ep = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ept' field.
      * @return The value.
      */
    public java.lang.String getEpt() {
      return ept;
    }


    /**
      * Sets the value of the 'ept' field.
      * @param value The value of 'ept'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.EndpointData.Builder setEpt(java.lang.String value) {
      validate(fields()[2], value);
      this.ept = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ept' field has been set.
      * @return True if the 'ept' field has been set, false otherwise.
      */
    public boolean hasEpt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ept' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.EndpointData.Builder clearEpt() {
      ept = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'q' field.
      * @return The value.
      */
    public boolean getQ() {
      return q;
    }


    /**
      * Sets the value of the 'q' field.
      * @param value The value of 'q'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.EndpointData.Builder setQ(boolean value) {
      validate(fields()[3], value);
      this.q = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'q' field has been set.
      * @return True if the 'q' field has been set, false otherwise.
      */
    public boolean hasQ() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'q' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.EndpointData.Builder clearQ() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'resources' field.
      * @return The value.
      */
    public java.util.List<com.pelion.kafka.connect.ResourceData> getResources() {
      return resources;
    }


    /**
      * Sets the value of the 'resources' field.
      * @param value The value of 'resources'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.EndpointData.Builder setResources(java.util.List<com.pelion.kafka.connect.ResourceData> value) {
      validate(fields()[4], value);
      this.resources = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'resources' field has been set.
      * @return True if the 'resources' field has been set, false otherwise.
      */
    public boolean hasResources() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'resources' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.EndpointData.Builder clearResources() {
      resources = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.pelion.kafka.connect.EndpointData.Builder setTimestamp(long value) {
      validate(fields()[5], value);
      this.timestamp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.pelion.kafka.connect.EndpointData.Builder clearTimestamp() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EndpointData build() {
      try {
        EndpointData record = new EndpointData();
        record.ep = fieldSetFlags()[0] ? this.ep : (java.lang.String) defaultValue(fields()[0]);
        record.original_ep = fieldSetFlags()[1] ? this.original_ep : (java.lang.String) defaultValue(fields()[1]);
        record.ept = fieldSetFlags()[2] ? this.ept : (java.lang.String) defaultValue(fields()[2]);
        record.q = fieldSetFlags()[3] ? this.q : (java.lang.Boolean) defaultValue(fields()[3]);
        record.resources = fieldSetFlags()[4] ? this.resources : (java.util.List<com.pelion.kafka.connect.ResourceData>) defaultValue(fields()[4]);
        record.timestamp = fieldSetFlags()[5] ? this.timestamp : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EndpointData>
    WRITER$ = (org.apache.avro.io.DatumWriter<EndpointData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EndpointData>
    READER$ = (org.apache.avro.io.DatumReader<EndpointData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.ep);

    out.writeString(this.original_ep);

    if (this.ept == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.ept);
    }

    out.writeBoolean(this.q);

    long size0 = this.resources.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.pelion.kafka.connect.ResourceData e0: this.resources) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeLong(this.timestamp);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.ep = in.readString();

      this.original_ep = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.ept = null;
      } else {
        this.ept = in.readString();
      }

      this.q = in.readBoolean();

      long size0 = in.readArrayStart();
      java.util.List<com.pelion.kafka.connect.ResourceData> a0 = this.resources;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.pelion.kafka.connect.ResourceData>((int)size0, SCHEMA$.getField("resources").schema());
        this.resources = a0;
      } else a0.clear();
      SpecificData.Array<com.pelion.kafka.connect.ResourceData> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.pelion.kafka.connect.ResourceData>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.pelion.kafka.connect.ResourceData e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.pelion.kafka.connect.ResourceData();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      this.timestamp = in.readLong();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.ep = in.readString();
          break;

        case 1:
          this.original_ep = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ept = null;
          } else {
            this.ept = in.readString();
          }
          break;

        case 3:
          this.q = in.readBoolean();
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<com.pelion.kafka.connect.ResourceData> a0 = this.resources;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.pelion.kafka.connect.ResourceData>((int)size0, SCHEMA$.getField("resources").schema());
            this.resources = a0;
          } else a0.clear();
          SpecificData.Array<com.pelion.kafka.connect.ResourceData> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.pelion.kafka.connect.ResourceData>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.pelion.kafka.connect.ResourceData e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.pelion.kafka.connect.ResourceData();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 5:
          this.timestamp = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










